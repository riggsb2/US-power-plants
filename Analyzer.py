import numpy as np
import pandas as pd
import os
from scipy import stats
from collections import defaultdict
import matplotlib.pyplot as plt

def GenDataset():
    print('Regenerating Master DataSet')
    
    MMBTU_MWH = 0.29307
    IDNames = ['Plant Id', 'Plant Code','Plant ID']
    UtilityNames = ['OPERATOR NAME','UTILITY_NAME','Utility Name','Operator Name']
    YearNames = ['Year','YEAR']
    PlantNames = ['Plant Name']
    StateNames = ['State', 'Plant State']
    MoverNames = ['Reported Prime Mover']
    FuelNames = ['AER Fuel Type Code']
    ElecFuelNames = ['Elec Fuel Consumption MMBtu','ELEC FUEL CONSUMPTION MMBTUS']
    GenNames = ['Net Generation (Megawatthours)','NET GENERATION (megawatthours)']
    
    xls = pd.ExcelFile('Files to Read.xlsx')
    file_df = xls.parse(header =0)
    file_df.sort_values(by='Year', inplace=True, ascending=False)
    
    years = np.arange(min(file_df['Year']),max(file_df['Year']+1),1)
    
    master_df = pd.DataFrame()
    
    os.chdir(os.path.join('Sources'))

    for year in years:
        files = file_df.loc[file_df['Year'] == year] 
        GFDFile = files.loc[files['Type'] == 'GFD', 'File'].item()
       
        print('Gen and Fuel File')
        print(GFDFile)

        temp_df = pd.DataFrame()
    
        xls = pd.ExcelFile(GFDFile)
        sheets = xls.sheet_names
        
        df = xls.parse(sheets[0])
        df = Clean(df)
        header = list(df.columns.values)
        YearCol = list(set(YearNames) & set(header))
        UtilityCol = list(set(UtilityNames) & set(header))
        StateCol = list(set(StateNames) & set(header))
        PlCodeCol = list(set(IDNames) & set(header))
        MoverCol = list(set(MoverNames) & set(header))
        FuelCol = list(set(FuelNames) & set(header))
        ElecFuelCol = list(set(ElecFuelNames) & set(header))
        GenCol = list(set(GenNames) & set(header))
        
        temp_df['Year'] = df[YearCol.pop()]
        temp_df['Utility'] = df[UtilityCol[0]]
        temp_df['Plant State'] = df[StateCol[0]]
        temp_df['Plant Code'] = df[PlCodeCol[0]]
        temp_df['Primary Mover'] = df[MoverCol[0]]
        temp_df['AER Fuel Code'] = df[FuelCol[0]]
        temp_df['Fuel Consumption MWh'] = df[ElecFuelCol[0]]*MMBTU_MWH
        temp_df['Net Generation MWh'] = df[GenCol[0]]
        temp_df['Efficiency'] = (df[GenCol[0]]/(df[ElecFuelCol[0]]*MMBTU_MWH))
        
        temp_df = temp_df[temp_df.index!='State-Fuel Level Increment']
        master_df = master_df.append(temp_df)
    
    print(master_df.head())
    
    master_df.to_csv('Condensed Dataset.csv')
    os.chdir('..')

def Clean(df):

    head_loc = np.where(df=='Plant Name')[0]
    if head_loc:
        head_loc = head_loc.item()
        idx = 'Plant Name'
    else:
        head_loc = np.where(df=='PLANT NAME')[0]
        head_loc= head_loc.item()
        idx = 'PLANT NAME'
        
    df.columns = df.iloc[head_loc]
    todrop = np.arange(0,head_loc+1,1)
    df.drop(todrop,inplace=True)
    
    df.set_index(idx,inplace=True) 
    df.columns = df.columns.str.replace('\n',' ')
    df.columns = df.columns.str.replace('  ',' ')
    mask = df.isin(['.'])   
    df = df.where(~mask, other=0)
    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    return(df)
    
def MetaAnalysis(df):
    #cols = df.columns
    cols = ['Fuel Consumption MWh', 'Net Generation MWh', 'Efficiency']
    for col in cols:
        try:
            print('*****',col,'*****')
            print(df[col].describe())
            df[col].plot.hist(bins = 30)
            plt.xlim(1000)
            plt.show()
            plt.close()

        except:
            pass
    utilities = df['Utility'].value_counts()
    print(utilities.describe())
    utilities = utilities[utilities>30]
    print(utilities.describe())
    utilities.plot.hist(bins = 30)

    
def SecondClean(df):
    eff_upper = 1
    eff_lower = 0
    trouble_df = df[df['Efficiency']>eff_upper]
    trouble_df.append(df[df['Efficiency']<eff_lower])
    #trouble_df.append(df[df['Fuel Consumption MWh']<0])
    #trouble_df.append(df[df['Net Generation MWh']<0])
    SaveResultDF(trouble_df,'Trouble utilities')
    print(len(trouble_df), ' entries have been removed')
    
    df = df[df['Efficiency']<eff_upper]
    df = df[df['Efficiency']>eff_lower]
    df = df[df['Fuel Consumption MWh']>0]
    df = df[df['Net Generation MWh']>0]

    return df

#Generates dataframe for export that summarizes energy generated by fuel by state by year
def TimePortfolio(df,indexby, ofinterest, sortby):    
    #New dataframe with minimum columns
    portfolio = pd.DataFrame(columns = ['Year','Plant State'])
    
    #Iterate through all of the years available
    years = df['Year'].unique()    
    for year in years:
        year_df = df[df['Year']==year]
        
        if indexby == 'Plant State':
            #Entire US per year        
            US_net = year_df[sortby].sum()
            tdf = pd.DataFrame(columns = ['Year','Plant State',ofinterest,sortby])
            tdf.Year = pd.Series(year)
            tdf['Plant State'] = pd.Series('Entire US')
            
            #Iterate through fuel type
            fuel_types = year_df[ofinterest].unique()
            for fuel in fuel_types:
                if pd.isnull(fuel)==False:
                    net_gen = year_df.loc[year_df[ofinterest] == fuel, sortby].sum()
                    frac = net_gen/US_net
                    tdf[ofinterest] = fuel
                    tdf[sortby] = frac
                    portfolio = portfolio.append(tdf,ignore_index=True)        
        
        #Iterate over each state in YEAR
        indexed = df[indexby].unique()
        for index in indexed:
            idx_df = year_df[year_df[indexby]==index]
            tdf = pd.DataFrame(columns = ['Year',indexby])

            tdf.Year = pd.Series(year)
            tdf[indexby] = pd.Series(index)
            index_net = idx_df[sortby].sum()
            if index_net !=0:            
                fuel_types = df[ofinterest].unique()
                for fuel in fuel_types:
                    if pd.isnull(fuel)==False:
                        net_gen = idx_df.loc[idx_df[ofinterest] == fuel, sortby].sum()
                        frac = net_gen/index_net
                        tdf[ofinterest] = fuel
                        tdf[sortby] = frac
            
                        portfolio = portfolio.append(tdf,ignore_index=True)
        
    #Reorders columns to be user friendly
    col = list(portfolio.columns.values)
    PS = col.index(indexby)
    col.insert(0, col.pop(PS))
    y = col.index('Year')
    col.insert(0, col.pop(y))
    portfolio = portfolio[col]
    
    SaveResultDF(portfolio,'_'.join((indexby,ofinterest,sortby)))

    return(portfolio)

def PortfolioGeneration():
    
    print('Plant State','AER Fuel Code','Net Generation MWh')
    TimePortfolio(master_df,'Plant State','AER Fuel Code','Net Generation MWh')
    
    print('Plant State','AER Fuel Code','Fuel Consumption MWh')
    TimePortfolio(master_df,'Plant State','AER Fuel Code','Fuel Consumption MWh')

    #removes all utilites with less than 30 plants
    utility_sample = 30
    top_Ut= master_df['Utility'].value_counts()
    top_Ut = list(top_Ut[top_Ut>utility_sample].index)
    utilities = master_df[master_df['Utility'].isin(top_Ut)]
    print('Looking at ', len(utilities), ' out of ', len(master_df), ' plants')

    print('Utility','AER Fuel Code', 'Net Generation MWh')
    TimePortfolio(utilities,'Utility','AER Fuel Code', 'Net Generation MWh')
    
    print('Utility','AER Fuel Code', 'Fuel Consumption MWh')
    TimePortfolio(utilities,'Utility','AER Fuel Code', 'Fuel Consumption MWh')
    
    print('Utility','Primary Mover', 'Net Generation MWh')
    TimePortfolio(utilities,'Utility','Primary Mover', 'Net Generation MWh')

    return


def MoverTrends(df,stat,min_pts=2):
    cols = ['Plant Name','Plant State','Primary Mover','AER Fuel Code','m','b','Rsq','Std Error']
    trend_df = pd.DataFrame()
    states = df['Plant State'].unique()
    for state in states:
        state_df = df[df['Plant State']==state]
        movers = state_df['Primary Mover'].unique()
        for mover in movers:
            move_df = state_df[state_df['Primary Mover']==mover]
            fuels = move_df['AER Fuel Code'].unique()
            for fuel in fuels:            
                plants = move_df.index.unique()
                for plant in plants:
                    plant_df = move_df[move_df.index==plant]
                    x = plant_df['Year'].values
                    y = plant_df[stat].values
                    mask = ~pd.isnull(x) & ~pd.isnull(y)
                    x = x[mask]
                    y = y[mask]
                    if len(plant_df['Year'].unique())>=min_pts and len(plant_df[stat].unique())>=min_pts:
                        m, b, r_value, p_value, std_err = stats.linregress(x,y)
                        tdf = pd.DataFrame([[plant,state,mover,fuel,m,b,r_value**2,std_err]],columns = cols)
                        trend_df=trend_df.append(tdf,ignore_index=True)
    return(trend_df)


def LoadMaster():
    os.chdir(os.path.join('Sources'))
    master_df = pd.read_csv('Condensed Dataset.csv')
    os.chdir('..')
    return(master_df)

def SaveResultDF(df,file):
    os.chdir(os.path.join('Results'))
    df.to_csv('.'.join((file,'csv')),index=False)
    os.chdir('..')
    return


'''Master Headers
        'Year'
        'Utility'
        'Plant State'
        'Plant Code' 
        'Primary Mover'
        'AER Fuel Code'
        'Fuel Consumption MWh'
        'Net Generation MWh'
        'Efficiency'
'''

#GenDataset()

master_df = LoadMaster()
master_df = SecondClean(master_df)
#MetaAnalysis(master_df)

Utility_df = master_df[['Year','Utility','Net Generation MWh']]

Utility_df = Utility_df.groupby(['Utility','Year'],axis=0, as_index = False).sum()

top_UT = Utility_df.sort_values(['Year','Net Generation MWh','Utility'],ascending=False)[:20]

print(top_UT)
'''
utility_sample = 30
top_Ut= master_df['Utility'].value_counts()
top_Ut = list(top_Ut[top_Ut>utility_sample].index)

print(top_Ut[:10])\
'''
#PortfolioGeneration()
