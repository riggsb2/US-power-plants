# -*- coding: utf-8 -*-
"""
Created on Sat Oct 14 16:07:55 2017

@author: Khepri
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import re

def Clean(df):
    #Finds header values based on 'Year' Tag
    #Sets Plant Code as Index
    #dataframe.replace(to_replace=['.'],value=[0],inplace=True)
    head_loc = np.where(df=='Plant Name')[0]
    if head_loc:
        head_loc = head_loc.item()
        idx = 'Plant Name'
    else:
        head_loc = np.where(df=='PLANT NAME')[0]
        head_loc= head_loc.item()
        idx = 'PLANT NAME'
        
    df.columns = df.iloc[head_loc]
    todrop = np.arange(0,head_loc+1,1)
    df.drop(todrop,inplace=True)
    
    df.set_index(idx,inplace=True) 
    df.columns = df.columns.str.replace('\n',' ')
    df.columns = df.columns.str.replace('  ',' ')
    #df.columns = re.sub('\n', ' ', df.columns).strip()
    mask = df.isin(['.'])   
    df = df.where(~mask, other=0)
    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    return(df)
    
def reportheader(header):
    for i in range(len(header)):
        print(i,header[i])
        
def Statplot(df,sub,Title):  
    param_types = df[sub].unique()
    for inst in param_types:

        inst_df = df[df[sub]==inst]
        inst_df.set_index('Year',inplace=True) 

        xticks = (inst_df.index.values)
        x = np.arange(1,len(xticks)+1,1)
        y = (inst_df['Mean'].values)*100
        yerr = (inst_df['StDev'].values)*100

        if not os.path.isdir(os.path.join(' '.join((sub,'time series')))):
            os.makedirs(os.path.join(' '.join((sub,'time series'))))
        os.chdir(os.path.join(' '.join((sub,'time series'))))
        
        fig = plt.figure()
        ax1 = fig.add_subplot(111)
        ax1.errorbar(x,y,yerr,linestyle='-', marker='^')

        #ax1.set_xlim([min(x)-1,max(x)+1])
        ax1.set_ylim([0,100])
        ax1.set_xticks(x)
        ax1.set_xticklabels(xticks)
        ax1.set_title('{0:s}{1:s}'.format(Title,inst))
        ax1.set_xlabel('Year', fontsize=18)
        ax1.set_ylabel('Plant Efficiency', fontsize=16)

        fig.savefig(''.join((sub,inst,'.png')), facecolor = 'white',dpi=90, bbox_inches='tight')
        os.chdir('..')
    return()
    
def StateAnalysis(df,header):
    #Let's find total electricity generated by state
    states = df[header[5]].unique()
    fuel_types = df[header[14]].unique()
    
    idx = states
    col = fuel_types
    col = np.insert(col,0,'Total Electricity')
    state_df = pd.DataFrame(index = idx, columns = col)
    
    for state in states:
        temp = []
        temp_df =  df.loc[df[header[5]] == state,:]
        #state_net = df.loc[df[header[5]] == state, header[94]].sum()
        state_net = temp_df[header[94]].sum()
        temp.append(state_net)
        for fuel in fuel_types:
            net_gen = temp_df.loc[(temp_df[header[14]]) == fuel, header[94]].sum()
            frac = net_gen/state_net
            temp.append(frac)
        state_df.ix[state]=temp
    print(state_df)
    
def MonthlyEfficiency(df):

    fuel_types = df[header[14]].unique()
    col = ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']
    idx = fuel_types
    fuel_df = pd.DataFrame(index = idx, columns = col)
    for fuel in fuel_types:
        temp=[]
        for i in range(len(col)):
            gen = int(78+i)
            used = int(66+i)
            net_gen = df.loc[df[header[14]] == fuel, header[gen]].sum()
            net_elec_used = df.loc[df[header[14]] == fuel, header[used]].sum()
            try:    
                elec_eff = net_gen/net_elec_used
            except:
                elec_eff = 0
            temp.append(elec_eff)
        fuel_df.ix[fuel]=temp
    return(fuel_df)

def EfficiencyStatistics(df, sort):
    param_types = df[sort].unique()
    col = ['Mover', 'Mean','StDev','Median','#Outliers Removed','%Removed']
    param_df = pd.DataFrame(columns = col)
    for inst in param_types:
        inst_df = pd.DataFrame(columns = ['Efficiency'])
        inst_df['Efficiency'] = df.loc[df[sort]==inst,'Efficiency']
        inst_df =inst_df.groupby(inst_df.index).sum() #groups same powerplants toegether
        #removes nonsense data. TO BE ADDED: Log of removed data
        nonsense = inst_df[inst_df['Efficiency']>1]
        nonsense.append(inst_df[inst_df['Efficiency']<0])

        inst_df = inst_df[inst_df['Efficiency']<1]
        inst_df = inst_df[inst_df['Efficiency']>0]
        
        #removes outliers
        #cleaned = RemoveOutliers(inst_df)
        #inst_df = cleaned[0]
        #removed = cleaned[1]
        removed = len(nonsense)
        try:        
            perc_removed = (removed/len(inst_df))*100
        except:
            pass
        mean = inst_df['Efficiency'].mean(skipna=True)
        median = inst_df['Efficiency'].median(skipna=True)
        stdev = inst_df['Efficiency'].std(skipna=True)
        param_df.ix[inst]=[inst,mean,stdev,median,removed,perc_removed]
        
    return(param_df)

def RemoveOutliers(df):
#loops through outliers removal until none left
    condition = 0
    total_outliers = pd.DataFrame()
    #while condition ==0:        
           
    q1 = np.nanpercentile(df[[0]],q=25)
    q3 = np.nanpercentile(df[[0]],q=75)
    IQR = q3-q1
    Hi = q3+1.5*IQR
    Lo = q1-1.5*IQR
    outliers = pd.DataFrame(df[df >= Hi])
    outliers = outliers.append(df[df <= Lo])
    total_outliers = total_outliers.append(outliers)
    #if len(outliers)==0:
      #condition =1
    
    df = df[df <= Hi]
    df = df[df >= Lo]
           
    outliers_removed = len(total_outliers)
    
    return(df,outliers_removed)
    
def StatePricing(df,header):
    states = df['Plant State'].unique()

    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    price_stats = pd.DataFrame(index = states, columns = ['Mean','Median','StDev','#Outliers'])
    for state in states:
        state_df = df[df['Plant State']==state]
        #Calculation based on State data
        state_df['Price']=100*state_df['Revenue from Resale']/state_df['Sales\n for Resale']
        state_df['Price'] = state_df['Price'].astype(float)

        #Removes outliers based on 1.5*IQR        
        condition = 0
        total_outliers = pd.DataFrame()
        while condition ==0:        
            q1 = np.nanpercentile(state_df['Price'],q=25)
            q3 = np.nanpercentile(state_df['Price'],q=75)
            IQR = q3-q1
            Hi = q3+1.5*IQR
            Lo = q1-1.5*IQR
            outliers = pd.DataFrame(state_df.Price[state_df.Price >= Hi])
            outliers = outliers.append(state_df.Price[state_df.Price <= Lo])
            total_outliers = total_outliers.append(outliers)

            if len(outliers)==0:
                condition =1
                
            state_df = state_df[state_df.Price <= Hi]
            state_df = state_df[state_df.Price >= Lo]
        mean = state_df['Price'].mean(skipna=True)
        median = state_df['Price'].median(skipna=True)
        stdev = state_df['Price'].std(skipna=True)
        outliers_removed = len(total_outliers)
        price_stats.ix[state]=[mean, median,stdev,outliers_removed] 
       
    return(price_stats)
    
def PricebyMoverType(df1,df2,header1,header2):
    
    return()
MMBTU_MWH = 0.29307


IDNames = ['Plant Id', 'Plant Code','Plant ID']
YearNames = ['Year','YEAR']
PlantNames = ['Plant Name']
StateNames = ['State', 'Plant State']
MoverNames = ['Reported Prime Mover']
FuelNames = ['AER Fuel Type Code']
ElecFuelNames = ['Elec Fuel Consumption MMBtu','ELEC FUEL CONSUMPTION MMBTUS']
GenNames = ['Net Generation (Megawatthours)','NET GENERATION (megawatthours)']

RevenueNames = ['Revenue from Resale','Revenue from Resale (thousand dollars)']
SalesNames = ['Sales for Resale','SALES FOR RESALE']

master_df = pd.DataFrame()

#For reading all files in a directory
#files = [f for f in os.listdir('.') if os.path.isfile(f)]
 
xls = pd.ExcelFile('Files to Read.xlsx')
file_df = xls.parse(header =0)
file_df.sort_values(by='Year', inplace=True, ascending=False)

print(file_df)
years = np.arange(min(file_df['Year']),max(file_df['Year']+1),1)
#years = years[::-1] #for descending years
#years = [2013,2014]
print(years)

for year in years:
    print()
    print(year)
    files = file_df.loc[file_df['Year'] == year] 
    DisFile = files.loc[files['Type'] == 'DIS', 'File'].item()
    GFDFile = files.loc[files['Type'] == 'GFD', 'File'].item()

    temp_df = pd.DataFrame()

    print('Gen and Fuel File')
    print(GFDFile)
    xls = pd.ExcelFile(GFDFile)
    sheets = xls.sheet_names
    df = xls.parse(sheets[0])
    df = Clean(df)    
    header = list(df.columns.values)
    YearCol = set(YearNames) & set(header)
    StateCol = set(StateNames) & set(header)
    PlCodeCol = set(IDNames) & set(header)
    MoverCol = set(MoverNames) & set(header)
    FuelCol = set(FuelNames) & set(header)
    ElecFuelCol = set(ElecFuelNames) & set(header)
    GenCol = set(GenNames) & set(header)
    temp_df['Year'] = df[YearCol.pop()]
    temp_df['Plant State'] = df[StateCol.pop()]
    temp_df['Plant Code'] = df[PlCodeCol.pop()]
    temp_df['Primary Mover'] = df[MoverCol.pop()]
    temp_df['AER Fuel Code'] = df[FuelCol.pop()]
    temp_df['Efficiency'] = (df[GenCol.pop()]/(df[ElecFuelCol.pop()]*MMBTU_MWH))
    #except:
     #   reportheader(header)
      #  print(YearCol, StateCol, PlCodeCol, MoverCol, FuelCol, ElecFuelCol, GenCol)
       # n = input()
    print()
    print('Disposition File')    
    print(DisFile)
    temp_df2=pd.DataFrame()
    xls = pd.ExcelFile(DisFile)
    sheets = xls.sheet_names
    df = xls.parse(sheets[0])
    df = Clean(df)
    header = list(df.columns.values)
    
    RevCol = set(RevenueNames) & set(header)
    SalesCol = set(SalesNames) & set(header)
    if RevCol and SalesCol:
        temp_df2['Price of El']=100*df[RevCol.pop()]/df[SalesCol.pop()]
        temp_df = temp_df.join(temp_df2, how='outer')

    master_df = master_df.append(temp_df)

Move_eff = pd.DataFrame()

for year in years:
    
    
    year_df = pd.DataFrame()
    year_df = master_df[master_df['Year']==year]
    year_eff = EfficiencyStatistics(year_df,'Primary Mover')
    year_eff['Year'] = year
    
    Move_eff = pd.concat([Move_eff,year_eff])

Statplot(Move_eff,'Mover','Statistics for Mover Efficiency')

#fuel code = 14
#Move code = 12
#State code

#Then creat a results frame for calculations
#Then do analysis on calculations
