# -*- coding: utf-8 -*-
"""
Created on Sat Oct 14 16:07:55 2017

@author: Khepri
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import re

def Clean(df):
    #dataframe.replace(to_replace=['.'],value=[0],inplace=True)
    mask = df.isin(['.'])   
    df = df.where(~mask, other=0)
    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    return(df)
    
def reportheader(header):
    for i in range(len(header)):
        print(i,header[i])
        
def Statplot(df,Title):
    my_xticks = (df.index.values)
    x = np.arange(1,len(pricing)+1,1)
    plt.title(Title)
    plt.xticks(x, my_xticks)
    plt.errorbar(x,df['Mean'],df['StDev'],linestyle='None', marker='^')
    plt.close()
    return()
    
def StateAnalysis(df,header):
    #Let's find total electricity generated by state
    states = df[header[5]].unique()
    fuel_types = df[header[14]].unique()
    
    idx = states
    col = fuel_types
    col = np.insert(col,0,'Total Electricity')
    state_df = pd.DataFrame(index = idx, columns = col)
    
    for state in states:
        temp = []
        temp_df =  df.loc[df[header[5]] == state,:]
        #state_net = df.loc[df[header[5]] == state, header[94]].sum()
        state_net = temp_df[header[94]].sum()
        temp.append(state_net)
        for fuel in fuel_types:
            net_gen = temp_df.loc[(temp_df[header[14]]) == fuel, header[94]].sum()
            frac = net_gen/state_net
            temp.append(frac)
        state_df.ix[state]=temp
    print(state_df)

def ParameterEfficiencyAnalysis(df,header, param = 0):
    #Let's find total electricity generated by fuel type
    param_types = df[header[param]].unique()
    col = ['Fuel for Electricity','Net Electricity Generated','Fuel Efficiency']
    idx = param_types
    param_df = pd.DataFrame(index = idx, columns = col)
    for inst in param_types:
        net_gen = df.loc[df[header[param]] == inst, header[94]].sum()
        net_elec_used = df.loc[df[header[param]] == inst, header[93]].sum()
        try:    
            elec_eff = net_gen/net_elec_used
        except:
            elec_eff = 0
        temp = [net_elec_used,net_gen,elec_eff]
        param_df.ix[inst]=temp
        print(inst,net_elec_used,net_gen, elec_eff)
    return(param_df)
    
def MonthlyEfficiency(df):

    fuel_types = df[header[14]].unique()
    col = ['Jan','Feb','Mar','Apr','May','June','July','Aug','Sep','Oct','Nov','Dec']
    idx = fuel_types
    fuel_df = pd.DataFrame(index = idx, columns = col)
    for fuel in fuel_types:
        temp=[]
        for i in range(len(col)):
            gen = int(78+i)
            used = int(66+i)
            net_gen = df.loc[df[header[14]] == fuel, header[gen]].sum()
            net_elec_used = df.loc[df[header[14]] == fuel, header[used]].sum()
            try:    
                elec_eff = net_gen/net_elec_used
            except:
                elec_eff = 0
            temp.append(elec_eff)
        fuel_df.ix[fuel]=temp
    return(fuel_df)

def EfficiencyStatistics(df, header, param):
    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    param_types = df[header[param]].unique()
    idx = param_types
    col = ['Mean','StDev','Median']
    param_df = pd.DataFrame(index = idx, columns = col)
    for inst in param_types:
        inst_df = pd.DataFrame(columns = ['Used','Net','Eff'])
        inst_df['Net'] = df.loc[df[header[param]] == inst, header[94]]
        inst_df['Used'] = df.loc[df[header[param]] == inst, header[93]].multiply(MMBTU_MWH)
        
        inst_df =inst_df.groupby(inst_df.index).sum()

        inst_df['Eff'] = inst_df['Net']/inst_df['Used']
        inst_df = inst_df[inst_df['Eff']<1]
        inst_df = inst_df[inst_df['Eff']>0]

        mean = inst_df['Eff'].mean(skipna=True)
        median = inst_df['Eff'].median(skipna=True)
        stdev = inst_df['Eff'].std(skipna=True)
        param_df.ix[inst]=[mean,stdev,median]
    return(param_df)

def StatePricing(df,header):
    states = df['Plant State'].unique()

    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    price_stats = pd.DataFrame(index = states, columns = ['Mean','Median','StDev','#Outliers'])
    for state in states:
        state_df = df[df['Plant State']==state]
        #Calculation based on State data
        state_df['Price']=100*state_df['Revenue from Resale']/state_df['Sales\n for Resale']
        state_df['Price'] = state_df['Price'].astype(float)

        #Removes outliers based on 1.5*IQR        
        condition = 0
        total_outliers = pd.DataFrame()
        while condition ==0:        
            q1 = np.nanpercentile(state_df['Price'],q=25)
            q3 = np.nanpercentile(state_df['Price'],q=75)
            IQR = q3-q1
            Hi = q3+1.5*IQR
            Lo = q1-1.5*IQR
            outliers = pd.DataFrame(state_df.Price[state_df.Price >= Hi])
            outliers.append(state_df.Price[state_df.Price <= Lo])
            total_outliers = total_outliers.append(outliers)

            if len(outliers)==0:
                condition =1
                
            state_df = state_df[state_df.Price <= Hi]
            state_df = state_df[state_df.Price >= Lo]
        mean = state_df['Price'].mean(skipna=True)
        median = state_df['Price'].median(skipna=True)
        stdev = state_df['Price'].std(skipna=True)
        outliers_removed = len(total_outliers)
        price_stats.ix[state]=[mean, median,stdev,outliers_removed] 
       
    return(price_stats)
    
def PricebyMoverType(df1,df2,header1,header2):
    
    return()
MMBTU_MWH = 0.29307

master_df = pd.DataFrame()

#files = [f for f in os.listdir('.') if os.path.isfile(f)]
 
xls = pd.ExcelFile('Files to Read.xlsx')
file_df = xls.parse(header =0)
file_df.sort_values(by='Year', inplace=True, ascending=False)

for file in file_df['File']:
    print(file)
    xls = pd.ExcelFile(file)
    sheets = xls.sheet_names
    
    idx = file_df.index[file_df['File'] == file].tolist()
    Type = file_df.loc[idx,'Type'].item()

    temp_df = pd.DataFrame()

    if Type =='Dis':
        print('Disposition File')
        df = xls.parse(sheets[0],header =4, index_col=4)
        df = Clean(df)
        header = list(df.columns.values)
        reportheader(header)
        temp_df['Plant Name']=df[header[5]]
        temp_df['Price of El']=100*df[header[18]]/df[header[14]]

    elif Type=='GFD':
        print('Gen and Fuel File')

        df = xls.parse(sheets[0], header =5, index_col =0)
        df = Clean(df)
        header = list(df.columns.values)
        reportheader(header)

        temp_df['Year'] = df[header[95]]
        temp_df['Plant State'] = df[header[5]]
        temp_df['Plant Name'] = df[header[2]]
        temp_df['Primary Mover'] = df[header[12]]
        temp_df['AER Fuel Code'] = df[header[14]]
        temp_df['EFficiency'] = (df[header[94]]/(df[header[93]]*MMBTU_MWH))

    master_df = master_df.append(temp_df)
    
print(master_df.head(100))
'''
file = "EIA923_Schedules_2_3_4_5_M_12_2015_Final_Revision.xlsx"
xls = pd.ExcelFile(file)
sheets = xls.sheet_names

power_df = xls.parse(sheets[0], header =5, index_col =0)
power_df = Clean(power_df)
power_header = list(power_df.columns.values)

reportheader(power_header)
master_df['Year'] = power_df[power_header[95]]
master_df['Plant State'] = power_df[power_header[5]]
master_df['Plant Name'] = power_df[power_header[2]]
master_df['Primary Mover'] = power_df[power_header[12]]
master_df['AER Fuel Code'] = power_df[power_header[14]]
master_df['EFficiency'] = (power_df[power_header[94]]/(power_df[power_header[93]]*MMBTU_MWH))

flow_file = "EIA923_Schedules_6_7_NU_SourceNDisposition_2015_Final_Revision.xlsx"
xls = pd.ExcelFile(flow_file)
sheets = xls.sheet_names
flow_dataset = xls.parse(sheets[0],header =4, index_col=4)
flow_dataset = Clean(flow_dataset)
flow_header = list(flow_dataset.columns.values)

reportheader(flow_header)
master_df['Plant Name']=flow_dataset[flow_header[5]]
master_df['Price of El']=100*flow_dataset[flow_header[18]]/flow_dataset[flow_header[14]]

'''
# ignore >100% or <0 efficiencies
'''
#One Year Statistics on Power Plant by Fuel Type
stats = EfficiencyStatistics(power_dataset,14)
Statplot(stats,'Statistics by Fueld type')

#One Year Statistics on Power Plant by Primary mover type
stats = EfficiencyStatistics(power_dataset,12)
Statplot(stats,'Statistics by Mover type')
'''
#fuel code = 14
#Move code = 12
#State code
'''
flow_file = "EIA923_Schedules_6_7_NU_SourceNDisposition_2015_Final_Revision.xlsx"
xls = pd.ExcelFile(flow_file)
sheets = xls.sheet_names
flow_dataset = xls.parse(sheets[0],header =4, index_col=4)
flow_dataset = Clean(flow_dataset)
flow_header = list(flow_dataset.columns.values)

#reportheader(flow_header)
pricing = StatePricing(flow_dataset,flow_header)
pricing.sort_index(inplace=True)
Statplot(pricing,'Statistics for wholsale prices')
'''
#Then creat a results frame for calculations
#Then do analysis on calculations
