# -*- coding: utf-8 -*-
"""
Created on Sat Oct 14 16:07:55 2017

@author: Khepri
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import statsmodels.api as sm
import math
from scipy import stats
import seaborn as sns


def Clean(df):
    #Finds header values based on 'Year' Tag
    #Sets Plant Code as Index
    #dataframe.replace(to_replace=['.'],value=[0],inplace=True)
    head_loc = np.where(df=='Plant Name')[0]
    if head_loc:
        head_loc = head_loc.item()
        idx = 'Plant Name'
    else:
        head_loc = np.where(df=='PLANT NAME')[0]
        head_loc= head_loc.item()
        idx = 'PLANT NAME'
        
    df.columns = df.iloc[head_loc]
    todrop = np.arange(0,head_loc+1,1)
    df.drop(todrop,inplace=True)
    
    df.set_index(idx,inplace=True) 
    df.columns = df.columns.str.replace('\n',' ')
    df.columns = df.columns.str.replace('  ',' ')
    #df.columns = re.sub('\n', ' ', df.columns).strip()
    mask = df.isin(['.'])   
    df = df.where(~mask, other=0)
    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    return(df)
    
def reportheader(header):
    for i in range(len(header)):
        print(i,header[i])
         
def StatePortfolio(df):
    #Let's find total electricity generated by state by fuel source
    years = df['Year'].unique()    

    portfolio = pd.DataFrame(columns = ['Year','Plant State'])
    for year in years:
        year_df = df[df['Year']==year]
        
        #Entire US per year        
        US_net = year_df['Net Generation MWh'].sum()
        tdf = pd.DataFrame(columns = ['Year','Plant State'])
        tdf.Year = pd.Series(year)
        tdf['Plant State'] = pd.Series('Entire US')
        
        fuel_types = year_df['AER Fuel Code'].unique()
        for fuel in fuel_types:
            if pd.isnull(fuel)==False:
                net_gen = year_df.loc[year_df['AER Fuel Code'] == fuel, 'Net Generation MWh'].sum()
                frac = net_gen/US_net
                tdf[fuel] = pd.Series(frac)
        portfolio = portfolio.append(tdf,ignore_index=True)        
        
        states = df['Plant State'].unique()
        for state in states:
            state_df = year_df[year_df['Plant State']==state]
            tdf = pd.DataFrame(columns = ['Year','Plant State'])

            tdf.Year = pd.Series(year)
            tdf['Plant State'] = pd.Series(state)
            state_net = state_df['Net Generation MWh'].sum()
            if state_net !=0:            
                fuel_types = df['AER Fuel Code'].unique()
                for fuel in fuel_types:
                    if pd.isnull(fuel)==False:
                        net_gen = state_df.loc[state_df['AER Fuel Code'] == fuel, 'Net Generation MWh'].sum()
                        frac = net_gen/state_net
                        tdf[fuel] = pd.Series(frac)
            
            portfolio = portfolio.append(tdf,ignore_index=True)
    
    col = list(portfolio.columns.values)
    PS = col.index('Plant State')
    col.insert(0, col.pop(PS))
    y = col.index('Year')
    col.insert(0, col.pop(y))

    portfolio = portfolio[col]
    return(portfolio)

def PortfolioTrend(df):
    cols = ['Plant State','AER Fuel Code','m','b','Rsq','Std Error']
    trend_df = pd.DataFrame()
    states = df['Plant State'].unique()
    for state in states:
        state_df = df[df['Plant State']==state]
        fuels = list(df.columns.values)[2:]
        for fuel in fuels:                        
            x = state_df['Year'].values
            y = state_df[fuel].values
            mask = ~pd.isnull(x) & ~pd.isnull(y)
            try:
                m, b, r_value, p_value, std_err = stats.linregress(x[mask],y[mask])
                tdf = pd.DataFrame([[state,fuel,m,b,r_value**2,std_err]],columns = cols)
                trend_df=trend_df.append(tdf,ignore_index=True)
            except:
                tdf = pd.DataFrame([[state,fuel,np.nan,np.nan,np.nan,np.nan]],columns = cols)
                trend_df=trend_df.append(tdf,ignore_index=True)
    return(trend_df)
    
def PortfolioPlot(df):
    if not os.path.isdir(os.path.join('State Portfolios')):
        os.makedirs(os.path.join('State Portfolios'))
    os.chdir(os.path.join('State Portfolios'))
    
    states = df['Plant State'].unique()
    for state in states:
        if pd.isnull(state)==False:
            state_df = df[df['Plant State']==state]
            state_df = state_df.loc[pd.notnull(state_df['Year'])]
            state_df= state_df.loc[:, (state_df > 0.01).any()]
            fuels = list(state_df.columns.values)[2:]
            state_df['Year'] = state_df['Year'].astype(int)
            plt.clf()
            ax1 = state_df.plot.bar('Year',fuels,stacked = True)
            ax1.set_title(' '.join(('Generation Distribution in',state)))
            ax1.set_xlabel('Year')
            ax1.set_ylabel('Fraction Generated Energy')
            ax1.set_ylim(0,1)
            box = ax1.get_position()
            ax1.set_position([box.x0, box.y0, box.width * 0.8, box.height])
            handles, labels = ax1.get_legend_handles_labels()
            ax1.legend(handles[::-1], labels[::-1],loc='center left', bbox_to_anchor=(1, 0.5), title = 'AER Fuel Type Code' )
            ax1.plot()
            fig1 = plt.gcf()
            fig1.savefig(' '.join((state,'portfolio.png')), facecolor = 'white',dpi=90, bbox_inches='tight')
            plt.close('all')

    os.chdir('..')
    return()
    
def RetailPricingTrend(df,min_pts):
    cols = ['State','Sector', 'm','b','Rsq','Std Error']    
    trend_df = pd.DataFrame()
    states = df['State'].unique()
    if not os.path.isdir(os.path.join('Retail Pricing Plots')):
        os.makedirs(os.path.join('Retail Pricing Plots'))
    os.chdir(os.path.join('Retail Pricing Plots'))
    for state in states:
        state_df = df[df['State']==state]
        sectors = state_df['Sector'].unique()
        for sector in sectors:
            sector_df = state_df[state_df['Sector']==sector]
            x = list(sector_df.columns.values)[1:16]
            y = sector_df.iloc[0][1:16]
            if len(y)>=min_pts and len(x)>=min_pts:
                m, b, r_value, p_value, std_err = stats.linregress(x,y)
                tdf = pd.DataFrame([[state,sector,m,b,r_value**2,std_err]],columns = cols)
                trend_df=trend_df.append(tdf,ignore_index=True)
            if np.random.uniform() <= 0.05:
                plt.scatter(x,y)
                y_fit = [i*m+b for i in x]
                plt.plot(x,y_fit)
                title = ' '.join((state, sector,'retail prices'))
                plt.title(title)
                plt.xlabel('Year')
                plt.ylabel('cents/kWh')
                plt.savefig(''.join((title,'.png')), facecolor = 'white',dpi=90, bbox_inches='tight')
                plt.close()
    os.chdir('..')

    return(trend_df)
    
def MoverTrends(df,stat,min_pts=2):
    cols = ['Plant Name','Plant State','Primary Mover','AER Fuel Code','m','b','Rsq','Std Error']
    trend_df = pd.DataFrame()
    states = df['Plant State'].unique()
    for state in states:
        state_df = df[df['Plant State']==state]
        movers = state_df['Primary Mover'].unique()
        for mover in movers:
            move_df = state_df[state_df['Primary Mover']==mover]
            fuels = move_df['AER Fuel Code'].unique()
            for fuel in fuels:            
                plants = move_df.index.unique()
                for plant in plants:
                    plant_df = move_df[move_df.index==plant]
                    x = plant_df['Year'].values
                    y = plant_df[stat].values
                    mask = ~pd.isnull(x) & ~pd.isnull(y)
                    x = x[mask]
                    y = y[mask]
                    if len(plant_df['Year'].unique())>=min_pts and len(plant_df[stat].unique())>=min_pts:
                        m, b, r_value, p_value, std_err = stats.linregress(x,y)
                        tdf = pd.DataFrame([[plant,state,mover,fuel,m,b,r_value**2,std_err]],columns = cols)
                        trend_df=trend_df.append(tdf,ignore_index=True)
    return(trend_df)

def TrendBoxplot(df,name, Rsq_lim = 0,lower=-100,upper=100):
    df = df[df['Rsq']>=Rsq_lim]
    df = df[df['m']<upper]
    df = df[df['m']>lower]

    col = df['Primary Mover'].unique()
    max_idx = len(df)
    idx = np.arange(1,max_idx,1)
    mover_df = pd.DataFrame(index = idx)

    stat_df = pd.DataFrame(index = col,columns = ['Median','StDev'])
   
    if not os.path.isdir(os.path.join(' '.join((name, 'Trends')))):
        os.makedirs(os.path.join(' '.join((name, 'Trends'))))
    os.chdir(os.path.join(' '.join((name, 'Trends'))))
    
    for mover in col:
        if type(mover)==str:
            tdf = df.loc[df['Primary Mover']==mover]
            fuels = tdf['AER Fuel Code'].unique()
            
            moverfuel_df = pd.DataFrame(index = idx)
    
            if len(fuels) >1:
                for fuel in fuels:
                    if type(fuel) ==str:
                        #moverfuel = '-'.join((mover,fuel))
                        moverfuel = fuel
                        moverfuel_df[moverfuel] = tdf.loc[tdf['AER Fuel Code']==fuel,'m']
                        median = moverfuel_df[moverfuel].median(skipna=True)
                        stdev = moverfuel_df[moverfuel].std(skipna=True)
                        stat_df.ix[moverfuel]=[median,stdev]
                moverfuel_df.dropna(1,how='all',inplace=True)
                print(moverfuel_df)
                
                if len(list(moverfuel_df.columns.values))>0:
                    sns.boxplot(moverfuel_df)
                    plt.title(' '.join((mover,'trend Box Plot')))
                    plt.xlabel('Fuel Type')
                    plt.ylabel('fractional change/year')
                    plt.savefig(''.join((mover,'.png')), facecolor = 'white',dpi=90, bbox_inches='tight')
                    plt.close()
                mover_df[mover] = df.loc[df['Primary Mover']==mover,'m']
                median = mover_df[mover].median(skipna=True)
                stdev = mover_df[mover].std(skipna=True)
                stat_df.ix[mover]=[median,stdev]
            else:
                mover_df[mover] = df.loc[df['Primary Mover']==mover,'m']
                median = mover_df[mover].median(skipna=True)
                stdev = mover_df[mover].std(skipna=True)
                stat_df.ix[mover]=[median,stdev]

    mover_df.sort_index(inplace=True)
    mover_df.dropna(1,how='all',inplace=True)
    sns.boxplot(mover_df)
    plt.title('Mover trends boxplot')
    plt.xlabel('Mover Type')
    plt.ylabel('fractional change/year')
    stat_df.to_csv(' '.join((name, ' summary statistics.csv')),delimiter = ',')
    plt.savefig(' '.join((name, ' Trend Statistics.png')), facecolor = 'white',dpi=90, bbox_inches='tight')
    plt.close()
        
    os.chdir('..')
    return()
    
def RemoveOutliers(df):
    #loops through outliers removal until none left
    #condition = 0
    total_outliers = pd.DataFrame()
    #while condition ==0:        
           
    q1 = np.nanpercentile(df[[0]],q=25)
    q3 = np.nanpercentile(df[[0]],q=75)
    IQR = q3-q1
    Hi = q3+1.5*IQR
    Lo = q1-1.5*IQR
    outliers = pd.DataFrame(df[df >= Hi])
    outliers = outliers.append(df[df <= Lo])
    total_outliers = total_outliers.append(outliers)
    #if len(outliers)==0:
      #condition =1
    
    df = df[df <= Hi]
    df = df[df >= Lo]
           
    outliers_removed = len(total_outliers)
    
    return(df,outliers_removed)
    
def StatePricing(df,header):
    states = df['Plant State'].unique()

    mask = df.isin([0])   
    df = df.where(~mask, other=np.nan)
    price_stats = pd.DataFrame(index = states, columns = ['Mean','Median','StDev','#Outliers'])
    for state in states:
        state_df = df[df['Plant State']==state]
        #Calculation based on State data
        state_df['Price']=100*state_df['Revenue from Resale']/state_df['Sales\n for Resale']
        state_df['Price'] = state_df['Price'].astype(float)

        #Removes outliers based on 1.5*IQR        
        condition = 0
        total_outliers = pd.DataFrame()
        while condition ==0:        
            q1 = np.nanpercentile(state_df['Price'],q=25)
            q3 = np.nanpercentile(state_df['Price'],q=75)
            IQR = q3-q1
            Hi = q3+1.5*IQR
            Lo = q1-1.5*IQR
            outliers = pd.DataFrame(state_df.Price[state_df.Price >= Hi])
            outliers = outliers.append(state_df.Price[state_df.Price <= Lo])
            total_outliers = total_outliers.append(outliers)

            if len(outliers)==0:
                condition =1
                
            state_df = state_df[state_df.Price <= Hi]
            state_df = state_df[state_df.Price >= Lo]
        mean = state_df['Price'].mean(skipna=True)
        median = state_df['Price'].median(skipna=True)
        stdev = state_df['Price'].std(skipna=True)
        outliers_removed = len(total_outliers)
        price_stats.ix[state]=[mean, median,stdev,outliers_removed] 
       
    return(price_stats)
    
    
MMBTU_MWH = 0.29307

IDNames = ['Plant Id', 'Plant Code','Plant ID']
YearNames = ['Year','YEAR']
PlantNames = ['Plant Name']
StateNames = ['State', 'Plant State']
MoverNames = ['Reported Prime Mover']
FuelNames = ['AER Fuel Type Code']
ElecFuelNames = ['Elec Fuel Consumption MMBtu','ELEC FUEL CONSUMPTION MMBTUS']
GenNames = ['Net Generation (Megawatthours)','NET GENERATION (megawatthours)']

RevenueNames = ['Revenue from Resale','Revenue from Resale (thousand dollars)']
SalesNames = ['Sales for Resale','SALES FOR RESALE']

LayoutNames =['Page 7 File Layout']
#Automate getting dictionary from imported file

#US inflation rates
xls = pd.ExcelFile('SeriesReport-20171023194544_ea3fbe.xlsx')
inflation_df = xls.parse(index_col = 0, header = 11)

#Retail electricity rates
xls = pd.ExcelFile('Average_retail_price_of_electricity.xlsx')
retail_prices_df = xls.parse(header = 4)
retail_prices_df = retail_prices_df[retail_prices_df[2001].notnull()] 
mask = retail_prices_df.isin(['--'])   
retail_prices_df = retail_prices_df.where(~mask, other=np.nan)
s = retail_prices_df['description'].apply(lambda x: x.split(':'))
retail_prices_df['State'] = s.apply(lambda x: x[0])
retail_prices_df['Sector'] = s.apply(lambda x: x[1])
retail_prices_df.drop(['description','source key'],axis=1,inplace=True)
#adjust for inflation
years = list(retail_prices_df.columns.values)[1:16]
for year in years: 
    tot_infl = 1
    for i in range(year,max(years)):
        infl = inflation_df.get_value(i,'Annual')/100
        tot_infl = tot_infl*(1+infl)
    retail_prices_df[year]=retail_prices_df[year]*tot_infl

#For reading all files in a directory
#files = [f for f in os.listdir('.') if os.path.isfile(f)] 
xls = pd.ExcelFile('Files to Read.xlsx')
file_df = xls.parse(header =0)
file_df.sort_values(by='Year', inplace=True, ascending=False)

print(file_df)
years = np.arange(min(file_df['Year']),max(file_df['Year']+1),1)
#years = years[::-1] #for descending years
#years = [2005,2006,2007]

master_df = pd.DataFrame()

for year in years:
    print()
    print(year)
    files = file_df.loc[file_df['Year'] == year] 
    DisFile = files.loc[files['Type'] == 'DIS', 'File'].item()
    GFDFile = files.loc[files['Type'] == 'GFD', 'File'].item()

    temp_df = pd.DataFrame()

    print('Gen and Fuel File')
    print(GFDFile)
    xls = pd.ExcelFile(GFDFile)
    sheets = xls.sheet_names
    
    df = xls.parse(sheets[0])
    df = Clean(df)    
    header = list(df.columns.values)
    YearCol = list(set(YearNames) & set(header))
    StateCol = list(set(StateNames) & set(header))
    PlCodeCol = list(set(IDNames) & set(header))
    MoverCol = list(set(MoverNames) & set(header))
    FuelCol = list(set(FuelNames) & set(header))
    ElecFuelCol = list(set(ElecFuelNames) & set(header))
    GenCol = list(set(GenNames) & set(header))
    temp_df['Year'] = df[YearCol.pop()]
    temp_df['Plant State'] = df[StateCol[0]]
    temp_df['Plant Code'] = df[PlCodeCol[0]]
    temp_df['Primary Mover'] = df[MoverCol[0]]
    temp_df['AER Fuel Code'] = df[FuelCol[0]]
    temp_df['Net Generation MWh'] = df[GenCol[0]]
    temp_df['Efficiency'] = (df[GenCol[0]]/(df[ElecFuelCol[0]]*MMBTU_MWH))

    print()
    print('Disposition File')    
    print(DisFile)
    temp_df2=pd.DataFrame()
    xls = pd.ExcelFile(DisFile)
    sheets = xls.sheet_names
    df = xls.parse(sheets[0])
    df = Clean(df)
    header = list(df.columns.values)
    
    RevCol = list(set(RevenueNames) & set(header))
    SalesCol = list(set(SalesNames) & set(header))
    if RevCol and SalesCol:
        tot_infl = 1
        for i in range(year,max(years)):
            infl = inflation_df.get_value(i,'Annual')/100
            tot_infl = tot_infl*(1+infl)
        temp_df2['Price of El']=(100*df[RevCol[0]]/df[SalesCol[0]])*tot_infl
        temp_df = temp_df.join(temp_df2, how='outer')
    temp_df = temp_df[temp_df.index!='State-Fuel Level Increment']
    master_df = master_df.append(temp_df)

if not os.path.isdir(os.path.join('Results')):
    os.makedirs(os.path.join('Results'))
os.chdir(os.path.join('Results'))
<<<<<<< HEAD

=======
'''
>>>>>>> WIP
print('Retail Pricing Trends')
RetailTrends = RetailPricingTrend(retail_prices_df,5) 
RetailTrends.to_csv('Retail Pricing Trends.csv',delimiter = ',')

print('Efficiency Trends')
Efftrends = MoverTrends(master_df,'Efficiency',5)
Efftrends.to_csv('Efficiency Trend df.csv',delimiter = ',')
TrendBoxplot(Efftrends,'Efficiency',0.7,-0.25,0.25)
<<<<<<< HEAD
'''
=======

>>>>>>> WIP
print('Selling Price Trends')
Pricetrends = MoverTrends(master_df,'Price of El',4)
Pricetrends.to_csv('Selling Price Trend df.csv',delimiter = ',')
TrendBoxplot(Pricetrends,'Price of El',0.6,-0.25,0.25)
<<<<<<< HEAD
'''
=======

>>>>>>> WIP
print('State Portfolio')
EnergyPort = StatePortfolio(master_df)
EnergyPort.to_csv('State distribution df.csv',delimiter = ',')
PortfolioTrends = PortfolioTrend(EnergyPort)
PortfolioTrends.to_csv('State portfolio trends.csv',delimiter = ',')
PortfolioPlot(EnergyPort)
<<<<<<< HEAD

=======
'''
>>>>>>> WIP
